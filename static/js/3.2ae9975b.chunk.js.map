{"version":3,"sources":["Components/Profile/ProfileInfo/profileInfo.module.css","Components/Profile/MyPosts/myPosts.module.css","Components/Profile/MyPosts/Post/post.module.css","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/myPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Components/Profile/ProfileInfo/ProfileDataForm.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","style","item","src","alt","message","likeCount","maxLength10","maxLengthCreator","MyPostReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","disabled","submitting","MyPosts","React","memo","postElements","posts","map","p","id","key","Math","random","postsBlock","values","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","newPostText","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","profile","error","styleForm","formSummaryError","Input","type","Object","keys","contacts","contact","ProfileData","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","ProfIleInfo","Preloader","descriptionBlock","photos","large","userPhoto","profilePic","isOwner","target","files","length","savePhoto","initialValues","formData","console","log","saveProfile","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","composeAllWrappers","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2ae9975b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"profileInfo_descriptionBlock__2icWA\",\"contact\":\"profileInfo_contact__HxAbn\",\"profilePic\":\"profileInfo_profilePic__2E7_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__2UMqL\",\"posts\":\"myPosts_posts__25Jca\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__3Os_M\"};","import React from \"react\";\r\nimport style from \"./post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={style.item}>\r\n      <img\r\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0GcvltEcK8FCzX_72ZsFqVLHJ7DjHKFViaLIais7bIkHdpq_-&s\"\r\n        alt=\"\"\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likeCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport style from \"./myPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {\r\n  required,\r\n  maxLengthCreator,\r\n} from \"./../../../utils/validators/validators\";\r\nimport { Textarea } from \"./../../Common/Preloader/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(50);\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder={\"enter your post\"}\r\n          component={Textarea}\r\n          name={\"newPostBody\"}\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button disabled={props.submitting}>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst afterSubmit = (result, dispatch) =>\r\n  dispatch(reset(\"ProfileAddNewPostForm\"));\r\n\r\nconst MyPostReduxForm = reduxForm({\r\n  form: \"ProfileAddNewPostForm\",\r\n  onSubmitSuccess: afterSubmit,\r\n})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  let postElements = props.posts.map((p) => (\r\n    <Post\r\n      message={p.message}\r\n      likeCount={p.likeCount}\r\n      id={p.id}\r\n      key={Math.random()}\r\n    />\r\n  ));\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostBody);\r\n  };\r\n  return (\r\n    <div className={style.postsBlock}>\r\n      <h2>My posts</h2>\r\n      <MyPostReduxForm onSubmit={onAddPost} />\r\n      <div className={style.posts}>{postElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../Redux/profile-reduser\";\r\nimport MyPosts from \"./myPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostBody) => {\r\n      dispatch(addPostActionCreator(newPostBody));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <b>status</b> :{\" \"}\r\n          <span onDoubleClick={activateMode}>{props.status || \"-----\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deActivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n          ></input>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport {\r\n  Input,\r\n  Textarea,\r\n} from \"./../../Common/Preloader/FormsControls/FormsControls\";\r\nimport style from \"./profileInfo.module.css\";\r\nimport styleForm from \"../../Common/Preloader/FormsControls/FormsControl.module.css\";\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>Save</button>\r\n      </div>\r\n      {error && <div className={styleForm.formSummaryError}>{error} </div>}\r\n      <div>\r\n        <b>Full name</b>{\" \"}\r\n        <Field placeholder={\"full name\"} name={\"fullName\"} component={Input} />\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job </b>{\" \"}\r\n        <Field type={\"checkBox\"} name={\"lookingForAJob\"} component={Input} />\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>{\" \"}\r\n        <Field\r\n          name={\"lookingForAJobDescription\"}\r\n          component={Textarea}\r\n          placeholder={\"my skills\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>About me</b>{\" \"}\r\n        <Field\r\n          name={\"aboutMe\"}\r\n          component={Textarea}\r\n          placeholder={\"about me...\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b> :{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={style.contact}>\r\n              <b>\r\n                {key} :{\" \"}\r\n                <Field\r\n                  placeholder={key}\r\n                  name={\"contacts.\" + key}\r\n                  component={Input}\r\n                />{\" \"}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst ProfileDataFormReduxForm = reduxForm({ form: \"edit-profile\" })(\r\n  ProfileDataForm\r\n);\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { useState } from \"react\";\r\nimport style from \"./profileInfo.module.css\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/userPhoto.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfIleInfo = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  let profile = props.profile;\r\n\r\n  const onSubmit = (formData) => {\r\n    console.log(formData);\r\n    const promise = props.saveProfile(formData);\r\n    promise.then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={style.descriptionBlock}>\r\n        <img\r\n          src={profile.photos.large || userPhoto}\r\n          className={style.profilePic}\r\n        />\r\n        {props.isOwner && (\r\n          <span>\r\n            <input type={\"file\"} onChange={onMainPhotoSelected} />\r\n          </span>\r\n        )}\r\n\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={props.profile}\r\n            profile={profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            profile={profile}\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n          />\r\n        )}\r\n        <ProfileStatusWithHooks\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = (props) => {\r\n  const profile = props.profile;\r\n  const goToEditMode = props.goToEditMode;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={goToEditMode}>Edit</button>\r\n      </div>\r\n      <p>\r\n        <b>Full name</b> : {profile.fullName}\r\n      </p>\r\n      <p>\r\n        <b>Looking for a job </b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </p>\r\n      <p>\r\n        <b>My professional skills</b> : {profile.lookingForAJobDescription}\r\n      </p>\r\n\r\n      <p>\r\n        <b>About me</b> : {profile.aboutMe}{\" \"}\r\n      </p>\r\n      <div>\r\n        <b>Contacts</b> :{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contacts\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={style.contact}>\r\n      <b>{contactTitle}</b> : {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfIleInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts\";\r\nimport ProfIleInfo from \"./ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfIleInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveProfile={props.saveProfile}\r\n        savePhoto={props.savePhoto}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  saveProfile,\r\n  savePhoto,\r\n} from \"./../../Redux/profile-reduser\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n    }\r\n    if (!userId) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nlet composeAllWrappers = compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    saveProfile,\r\n    savePhoto,\r\n  }),\r\n  withRouter\r\n)(ProfileContainer);\r\n\r\nexport default composeAllWrappers;\r\n"],"sourceRoot":""}