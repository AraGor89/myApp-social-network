{"version":3,"sources":["Components/Dialogs/dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","style","dialog","active","to","name","Message","s","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","addMessageTextArea","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","compose","connect","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,wBAAwB,mBAAqB,sC,uICW/MC,EARI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,yBAAKC,UAAWC,IAAMC,OAAS,IAAMD,IAAME,QACzC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCEjBC,EAPC,SAACT,GACb,OACI,yBAAKG,UAAWO,IAAEC,SACbX,EAAMW,U,0CCKbC,EAAcC,YAAiB,IAsB/BC,EAAsBC,YAAU,CACpCC,KAAM,uBACNC,gBALkB,SAACC,EAAQC,GAAT,OAClBA,EAASC,YAAM,2BAEWL,EApBL,SAACf,GACtB,OACE,0BAAMqB,SAAUrB,EAAMsB,cACpB,yBAAKnB,UAAWC,IAAMmB,oBACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,qBACZjB,KAAM,iBACNkB,UAAWC,IACXC,SAAU,CAACC,IAAUjB,MAGzB,6BACE,6CAuCOkB,EA1BC,SAAC9B,GACf,IAAI+B,EAAQ/B,EAAMgC,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACtC,kBAAC,EAAD,CAAY5B,KAAM4B,EAAE5B,KAAMN,GAAIkC,EAAElC,GAAImC,IAAKD,EAAElC,QAEzCoC,EAAmBP,EAAMQ,SAASJ,KAAI,SAACK,GAAD,OACxC,kBAAC,EAAD,CAAS7B,QAAS6B,EAAE7B,QAAST,GAAIsC,EAAEtC,GAAImC,IAAKG,EAAEtC,QAOhD,OACE,yBAAKC,UAAWC,IAAM8B,SACpB,yBAAK/B,UAAWC,IAAMqC,cAAeR,GACrC,yBAAK9B,UAAWC,IAAMmC,UACpB,6BAAMD,GAEN,kBAACxB,EAAD,CAAqBO,SAVP,SAACqB,GACnB1C,EAAM2C,YAAYD,EAAOE,sB,gDC7CzBC,EAA6B,SAACd,GAChC,MAAO,CACLe,OAAQf,EAAMgB,KAAKD,S,OC6DRE,EATUC,YACvBC,aAlBoB,SAACnB,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACb,GACxB,MAAO,CAILwB,YAAa,SAACC,GACZzB,EAASgC,YAAmBP,UD5CF,SAACQ,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAKtD,MAAM8C,OACT,kBAACM,EAAcE,KAAKtD,OADI,kBAAC,IAAD,CAAUO,GAAI,eAHJ,GACbgD,IAAMH,WAStC,OAHqCF,YAAQL,EAARK,CACnCG,KCyCqBJ,CAGvBnB","file":"static/js/4.927c3fed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__STKuM\",\"dialogsItems\":\"dialogs_dialogsItems__3w7Sy\",\"active\":\"dialogs_active__2Qvrz\",\"messages\":\"dialogs_messages__1IVcb\",\"dialog\":\"dialogs_dialog__39BR2\",\"addMessageTextArea\":\"dialogs_addMessageTextArea__2G379\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport style from \"./../dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={style.dialog + \" \" + style.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../dialogs.module.css';\r\n\r\nconst Message = (props) =>{\r\n    return(\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport style from \"./dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport { Textarea } from \"./../Common/Preloader/FormsControls/FormsControls\";\r\nimport {\r\n  required,\r\n  maxLengthCreator,\r\n} from \"./../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={style.addMessageTextArea}>\r\n        <Field\r\n          placeholder=\"enter your message\"\r\n          name={\"newMessageBody\"}\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst afterSubmit = (result, dispatch) =>\r\n  dispatch(reset(\"dialogAddMessageForm\"));\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n  form: \"dialogAddMessageForm\",\r\n  onSubmitSuccess: afterSubmit,\r\n})(AddMessageForm);\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} id={d.id} key={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} id={m.id} key={m.id} />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <div className={style.dialogsItems}>{dialogsElements}</div>\r\n      <div className={style.messages}>\r\n        <div>{messagesElements}</div>\r\n\r\n        <AddMessageReduxForm onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  //upDateNewMessageBodyCreator,\r\n  sendMessageCreator,\r\n} from \"./../../Redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"./../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n// const DialogsContainer = (props) =>{\r\n// let state = props.store.getState().dialogsPage;\r\n\r\n// let onSendMessageClick = () => {\r\n//     props.store.dispatch(sendMessageCreator())\r\n// }\r\n// let onNewMessageChange = (body) => {\r\n//     props.store.dispatch(upDateNewMessageBodyCreator(body))\r\n// }\r\n\r\n//     return(\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) =>{\r\n//                     let state = store.getState().dialogsPage;\r\n\r\n//                     let onSendMessageClick = () => {\r\n//                         store.dispatch(sendMessageCreator())\r\n//                     }\r\n//                     let onNewMessageChange = (body) => {\r\n//                         store.dispatch(upDateNewMessageBodyCreator(body))\r\n//                     }\r\n//                 return <Dialogs upDateNewMessageBody={onNewMessageChange}\r\n//                                 sendMessage={onSendMessageClick}\r\n//                                 dialogsPage={state}/>\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    //isAuth : state.auth.isAuth\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // upDateNewMessageBody : (body) => {\r\n    //     dispatch(upDateNewMessageBodyCreator(body))\r\n    // },\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nlet composeAllWrappers = compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\n//withAuthRedirect - @ HOC - a, ira mej vorosh baner arden arac patrastac patatuma mek urish component\r\n//let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\nconst DialogsContainer = composeAllWrappers; // connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}